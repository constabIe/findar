services:
  app:
    build: .
    container_name: app
    ports:
      - "${API_PORT}:${API_PORT}"
    environment:
      - HOST=${HOST}
      - API_PORT=${API_PORT}
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - postgres
      - monitoring  
    restart: unless-stopped

  postgres:
    container_name: db
    image: postgres:16.10-alpine3.22
    volumes:
      - ./docker/postgresql.conf:/etc/postgresql.conf:ro
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql.conf"
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 10G

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "${CADVISOR_PORT}:${CADVISOR_PORT}"
    networks:
      - monitoring
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:9.9
    container_name: pgadmin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False" # To allow running in desktop mode
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - postgres
    restart: unless-stopped

  redis:
    image: redis/redis-stack:7.4.0-v7
    container_name: redis
    volumes:
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: >
      redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - postgres

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)"
    ports:
      - "${NE_PORT}:${NE_PORT}"
    networks:
      - monitoring
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v3.7.1
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "${PROMETHEUS_PORT}:${PROMETHEUS_PORT}"
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - cadvisor
      - node-exporter
      - alertmanager

  grafana:
    image: grafana/grafana:12.2.0
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GF_PORT}:${GF_PORT}"
    networks:
      - monitoring
      - postgres
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: loki
    volumes:
      - ./docker/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    ports:
      - "${LOKI_PORT}:${LOKI_PORT}"
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./docker/promtail-config.yaml:/etc/promtail/promtail-config.yaml
      # - /var/log:/var/log   # если логируем хостовые логи
    command: -config.file=/etc/promtail/promtail-config.yaml
    restart: unless-stopped
    depends_on:
      - loki

  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    ports:
      - "${AM_PORT}:${AM_PORT}"
    networks:
      - monitoring
    restart: unless-stopped

volumes:
  db_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:
  redis_data:
  loki_data:
  uv_cache:

networks:
  postgres:
    driver: bridge
  monitoring:
    driver: bridge
