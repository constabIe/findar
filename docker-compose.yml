services:
  api:
    build:
      context: .
      target: api
    container_name: api
    ports:
      - "${API_PORT}:${API_PORT}"
    env_file:
      - .env
    networks:
      - postgres
      - monitoring
    depends_on:
      # postgres:
      #   condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_started
    restart: unless-stopped

  migrations:
    build:
      context: .
      target: migrations
    container_name: migrations
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres
    restart: "no"

  celery:
    build:
      context: .
      target: celery
    container_name: celery
    env_file:
      - .env
    networks:
      - postgres
      - monitoring
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  bot:
    build:
      context: .
      target: bot
    container_name: bot
    env_file:
      - .env
    networks:
      - postgres
      - monitoring
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped

  frontend-builder:
    container_name: frontend-builder
    build:
      context: ./src/static/admiral
    volumes:
      - frontend_dist:/app/dist

  postgres:
    container_name: db
    image: postgres:16.10-alpine3.22
    volumes:
      - ./docker/postgresql.conf:/etc/postgresql.conf:ro
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    command: >
      postgres -c config_file=/etc/postgresql.conf
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 20G

  redis:
    image: redis/redis-stack:7.4.0-v7
    container_name: redis
    volumes:
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: >
      redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2G"
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - postgres

  node-exporter:
    image: prom/node-exporter:v1.10.0
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)"
    ports:
      - "${NE_PORT}:9100"
    networks:
      - monitoring
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v3.7.1
    container_name: prometheus
    volumes:
      - .localfiles/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      node-exporter:
        condition: service_started

  grafana:
    image: grafana/grafana:12.2.0
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GF_PORT}:3000"
    networks:
      - monitoring
      - postgres
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started
      postgres:
        condition: service_healthy
      api:
        condition: service_started
      celery:
        condition: service_started

  loki:
    image: grafana/loki:3.5.7
    container_name: loki
    volumes:
      - ./docker/loki.yml:/etc/loki/loki.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki.yml
    ports:
      - "${LOKI_PORT}:3100"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      grafana:
        condition: service_started

  promtail:
    image: grafana/promtail:3.5.7
    container_name: promtail
    volumes:
      - .localfiles/docker/promtail.yml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    ports:
      - ${PROMTAIL_PORT}:9080
    restart: unless-stopped
    depends_on:
      - loki

  proxy:
    image: jonasal/nginx-certbot:6.0.1-nginx1.29.2
    container_name: proxy
    volumes:
      - frontend_dist:/usr/share/nginx/html # Storage can be either a
      - .localfiles/docker/confs/nginx:/etc/nginx/conf.d # or a host mount with a relative or full path.
      - nginx_secrets:/etc/letsencrypt # Docker managed volume (see list at the bottom)
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
      - DHPARAM_SIZE=${DHPARAM_SIZE}
      - ELLIPTIC_CURVE=${ELLIPTIC_CURVE}
      - RENEWAL_INTERVAL=${RENEWAL_INTERVAL}
      - RSA_KEY_SIZE=${RSA_KEY_SIZE}
      - STAGING=${STAGING}
      - USE_ECDSA=${USE_ECDSA}
    ports:
      - 80:80
      - 443:443
    networks:
      - postgres
      - monitoring
    depends_on:
      - api
      - frontend-builder
      - node-exporter
      - grafana
    restart: unless-stopped

volumes:
  db_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:
  redis_data:
  loki_data:
  frontend_dist:
  nginx_secrets:

networks:
  postgres:
    driver: bridge
  monitoring:
    driver: bridge
