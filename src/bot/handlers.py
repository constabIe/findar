"""
Telegram bot message handlers.

Contains handlers for bot commands and messages.
"""

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import Message

from src.core.logging import get_logger
from src.modules.users.repository import UserRepository
from src.storage.sql import get_async_session

logger = get_logger("bot.handlers")

# Create router for handlers
router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """
    Handle /start command.

    Checks if user is registered and provides appropriate response.
    """
    if not message.from_user:
        logger.warning("Received message without from_user", component="telegram_bot")
        return

    telegram_id = message.from_user.id
    username = message.from_user.username

    print("HEREEE", username)

    logger.info(
        "Received /start command",
        component="telegram_bot",
        telegram_id=telegram_id,
        username=username,
    )

    try:
        # Get database session
        async for session in get_async_session():
            user_repo = UserRepository(session)

            # Check if user exists by telegram alias (username)
            user = await user_repo.get_user_by_telegram_alias(username)
            print("CURR_USER", user, username)

            if user:
                # User found in DB - update telegram_id if needed
                if user.telegram_id != telegram_id:
                    # Update telegram_id
                    updated_user = await user_repo.update_user_telegram_id(
                        user.id, telegram_id
                    )
                    if updated_user:
                        await message.answer(
                            f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
                            f"–¢–≤–æ–π Telegram ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É Findar.\n"
                            f"Email: {updated_user.email}\n\n"
                            f"–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –Ω–∞ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç."
                        )
                        logger.info(
                            "Telegram ID updated for user",
                            component="telegram_bot",
                            telegram_id=telegram_id,
                            user_id=str(updated_user.id),
                            telegram_alias=username,
                        )
                else:
                    # telegram_id already set
                    await message.answer(
                        f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
                        f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ Findar.\n"
                        f"Email: {user.email}\n\n"
                        f"–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –Ω–∞ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç."
                    )
                    logger.info(
                        "User already registered with correct telegram_id",
                        component="telegram_bot",
                        telegram_id=telegram_id,
                        user_id=str(user.id),
                        telegram_alias=username,
                    )
            else:
                # User NOT found in DB by alias
                await message.answer(
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ Findar.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ:\n"
                    f"https://findar.example.com/register\n\n"
                    f"‚ö†Ô∏è –í–∞–∂–Ω–æ: –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∫–∞–∂–∏ telegram alias: @{username}\n\n"
                    f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∏ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ /start"
                )
                logger.info(
                    "User not found by telegram alias, sent registration instructions",
                    component="telegram_bot",
                    telegram_id=telegram_id,
                    telegram_alias=username,
                )

            break  # Exit async generator

    except Exception as e:
        logger.exception(
            "Error handling /start command",
            component="telegram_bot",
            telegram_id=telegram_id,
        )
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. {e}"
        )


@router.message()
async def handle_unknown_message(message: Message) -> None:
    """Handle all other messages."""
    await message.answer(
        "‚ÑπÔ∏è –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    )
