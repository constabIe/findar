"""created queue_tasks

Revision ID: 8577a9d53b61
Revises: fd54c0552b1c
Create Date: 2025-10-20 19:53:51.710026

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "8577a9d53b61"
down_revision: Union[str, Sequence[str], None] = "fd54c0552b1c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "queue_tasks",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("correlation_id", sqlmodel.AutoString(), nullable=False),
        sa.Column("celery_task_id", sqlmodel.AutoString(), nullable=True),
        sa.Column("transaction_id", sa.Uuid(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("PENDING", "APPROVED", "PROCESSING", "FLAGGED", "FAILED", "COMPLETED", name="taskstatus"),
            nullable=False,
        ),
        sa.Column("retry_count", sa.Integer(), nullable=False),
        sa.Column("max_retries", sa.Integer(), nullable=False),
        sa.Column(
            "error_type",
            sa.Enum(
                "VALIDATION_ERROR",
                "DATABASE_ERROR",
                "RULE_ENGINE_ERROR",
                "NOTIFICATION_ERROR",
                "TIMEOUT_ERROR",
                "UNKNOWN_ERROR",
                name="errortype",
            ),
            nullable=True,
        ),
        sa.Column("error_message", sqlmodel.AutoString(), nullable=True),
        sa.Column("error_traceback", sqlmodel.AutoString(), nullable=True),
        sa.Column("processing_time_ms", sa.Integer(), nullable=True),
        sa.Column("rule_engine_time_ms", sa.Integer(), nullable=True),
        sa.Column("db_write_time_ms", sa.Integer(), nullable=True),
        sa.Column("notification_time_ms", sa.Integer(), nullable=True),
        sa.Column("worker_id", sqlmodel.AutoString(), nullable=True),
        sa.Column("worker_hostname", sqlmodel.AutoString(), nullable=True),
        sa.Column(
            "task_metadata", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("last_retry_at", sa.DateTime(), nullable=True),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_queue_celery_task", "queue_tasks", ["celery_task_id"], unique=False
    )
    op.create_index(
        "idx_queue_correlation", "queue_tasks", ["correlation_id"], unique=False
    )
    op.create_index(
        "idx_queue_status_created",
        "queue_tasks",
        ["status", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_queue_transaction", "queue_tasks", ["transaction_id"], unique=False
    )
    op.create_index(
        op.f("ix_queue_tasks_celery_task_id"),
        "queue_tasks",
        ["celery_task_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_queue_tasks_correlation_id"),
        "queue_tasks",
        ["correlation_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_queue_tasks_status"), "queue_tasks", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_queue_tasks_transaction_id"),
        "queue_tasks",
        ["transaction_id"],
        unique=False,
    )
    op.alter_column("rules", "name", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        "rules",
        "params",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "rules",
        "params",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        nullable=False,
    )
    op.alter_column("rules", "name", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_index(op.f("ix_queue_tasks_transaction_id"), table_name="queue_tasks")
    op.drop_index(op.f("ix_queue_tasks_status"), table_name="queue_tasks")
    op.drop_index(op.f("ix_queue_tasks_correlation_id"), table_name="queue_tasks")
    op.drop_index(op.f("ix_queue_tasks_celery_task_id"), table_name="queue_tasks")
    op.drop_index("idx_queue_transaction", table_name="queue_tasks")
    op.drop_index("idx_queue_status_created", table_name="queue_tasks")
    op.drop_index("idx_queue_correlation", table_name="queue_tasks")
    op.drop_index("idx_queue_celery_task", table_name="queue_tasks")
    op.drop_table("queue_tasks")

    op.execute("DROP TYPE IF EXISTS errortype CASCADE;")
    op.execute("DROP TYPE IF EXISTS taskstatus CASCADE;")

    # ### end Alembic commands ###
